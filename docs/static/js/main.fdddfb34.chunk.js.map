{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFecthGifs.js","App.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFecthGifs","App","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAkBhD,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAST,EACTU,SAnBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCPjBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACdC,EADc,iDACmCC,UAAUH,GAD7C,+DAEDI,MAAMF,GAFL,cAEdG,EAFc,gBAGGA,EAAKC,OAHR,uBAGZC,EAHY,EAGZA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHA,IAAKA,EAAIC,GACTC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATtB,kBAYbM,GAZa,4CAAH,sDCCRO,EAAc,SAAC,GAAsB,IAArBJ,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAGpC,OADAc,QAAQC,IAAIN,EAAIC,EAAOV,GAEnB,sBAAKgB,UAAU,yCAAf,UACI,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAIA,QCFHS,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAAe,ECFT,SAAEA,GAAe,IAAD,EACdd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KAmBxC,OAbAC,qBAAW,WAEP1B,EAASC,GACR0B,MAAO,SAAAC,GACJH,EAAS,CACLjB,KAAMoB,EACNL,SAAQ,SAKjB,IAEIC,EDfoBK,CAAc5B,GAAjCa,EAFyB,EAE9BN,KAAae,EAFiB,EAEjBA,QAEpB,OACI,eAAC,WAAD,WAEI,mCAAMtB,EAAN,OAECsB,GAAW,wCAEZ,qBAAKJ,UAAU,YAAf,SAGQL,EAAOJ,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEctBkB,EAhCH,WAAM,MAIsB3C,mBAAS,CAAC,cAJhC,mBAIP4C,EAJO,KAIK7C,EAJL,KAYd,OACI,eAAC,WAAD,WACI,8CACA,uBACA,cAAC,EAAD,CAAaA,cAAiBA,IAItB6C,EAAWrB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAWA,GADJA,U,MCrBnC+B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.fdddfb34.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport propTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( { setCategories } ) => {   //---- me traigo el props desestructurado, solo necesito setcategories de App.js\r\n\r\n    const [inputValue, setInputValue] = useState('');  // ---- si no pongo nada, me da un warning : undefined\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();     // --- para evitar que se vuelva a cargar la página\r\n        \r\n        if (inputValue.trim().length > 2 ) {   // --- para prevenir que entre un valor vacío \r\n            setCategories( cats => [ inputValue, ...cats ]);  // -- le casco el valor de inputValue, antes de cats para que se muestre al inicio\r\n            setInputValue(''); // -- lo vacío para prevenir que no entre un valor repetido\r\n        }\r\n        \r\n    }\r\n        // --- con el elemnto form conseguimos realizar un posteo, pero no quiero que se vuelva a cargar la página\r\n    return (\r\n        <form onSubmit={handleSubmit}>  \r\n            <input\r\n                type=\"text\"\r\n                value = {inputValue}\r\n                onChange = { handleInputChange }\r\n            />\r\n            \r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: propTypes.func.isRequired\r\n}\r\n","\r\n export const getGifs = async ( category)  => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=fdgfBD4zcdcITZfoFaRdUOpU2D0HwNZj`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            img: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n\r\n    console.log(id, title, url);\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Fragment } from 'react';\r\nimport { useFecthGifs } from '../hooks/useFecthGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n// --- EN ESTA VERSIÓN DE GIFGRID ESTOY USANDO MI PROPIO HOOK useFecthGifs EN VEZ DEL USEEFFECT Y USESTATE DE LA ANTERIOR\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const {data:images, loading} = useFecthGifs( category );\r\n\r\n    return (\r\n        <Fragment>\r\n\r\n            <h3> {category} </h3>\r\n\r\n            {loading && <p>Loading</p>}\r\n\r\n            <div className=\"card-grid\">\r\n\r\n                {\r\n                    images.map((img) =>\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img}  // operador spread otra vez\r\n                        />\r\n                    )\r\n                }\r\n\r\n            </div>\r\n            \r\n       </Fragment>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\n    export const useFecthGifs = ( category ) => {\r\n        const [state, setState] = useState({\r\n            data: [],\r\n            loading: true\r\n        });\r\n\r\n        useEffect( ()=> {\r\n\r\n            getGifs( category )\r\n            .then ( imgs =>{\r\n                setState({\r\n                    data: imgs,\r\n                    loading:false\r\n                });\r\n\r\n            }) ;\r\n\r\n        }, [])\r\n\r\n        return state //  devuelve  {data: [], loading: true}\r\n    } ","import React, { Fragment, useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst App = () => {\r\n\r\n    // const categories = ['One Punch', 'Samurai X', 'Dragon ball'];\r\n\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    /* const handleAdd = () => {\r\n        // setCategories([...categories,'Lucky Luke']); // -operador spread\r\n\r\n        setCategories( cats => [...cats,'Lucky Luke']); // -- con un callback añadido\r\n    } */\r\n\r\n    return (\r\n        <Fragment>\r\n            <h2>GifExpertApp</h2>\r\n            <hr />\r\n            <AddCategory setCategories = {setCategories}/>\r\n            {/* <button onClick={handleAdd}>Agregar</button> */}\r\n            \r\n                {\r\n                    categories.map(category =>\r\n                        <GifGrid \r\n                            key = {category}\r\n                            category={ category} \r\n                        />\r\n                    )\r\n                }\r\n            \r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}